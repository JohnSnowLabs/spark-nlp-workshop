// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.johnsnowlabs.grpc_async";
option java_outer_classname = "SparkNLP";
option objc_class_prefix = "NLP";

package grpc_async;

// Interface exported by the server.
service sparknlp_async {

  //A simple RPC where the client sends a request to the server using the stub and waits for a response to come back,
  //just like a normal function call.
  //rpc clf(nlp_input) returns (nlp_output) {}
  //rpc ner(nlp_input) returns (nlp_output) {}
  //rpc re(nlp_input) returns (nlp_output) {}

  // A response-streaming RPC where the client sends a request to the server and gets a stream to read a sequence of
  // messages back.The client reads from the returned stream until there are no more messages.As you can see in the
  // example, you specify a response-streaming method by placing the stream keyword before the response type.
  rpc clf_1m(nlp_input) returns (stream nlp_output) {}
  rpc clf_10m(nlp_input) returns (stream nlp_output) {}
  rpc clf_100m(nlp_input) returns (stream nlp_output) {}
  rpc clf_200m(nlp_input) returns (stream nlp_output) {}
  rpc clf_300m(nlp_input) returns (stream nlp_output) {}

  rpc clfner_1m(nlp_input) returns (stream nlp_output) {}

  rpc docclf_1m(nlp_input) returns (stream nlp_output) {}
  rpc docclf_10m(nlp_input) returns (stream nlp_output) {}
  rpc docclf_100m(nlp_input) returns (stream nlp_output) {}
  rpc docclf_200m(nlp_input) returns (stream nlp_output) {}
  rpc docclf_300m(nlp_input) returns (stream nlp_output) {}

  // Same as before, but the stream is in input (writing), not in output (receiving a response)
  // rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // Bidirectional streaming
  // rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

message nlp_input {
  string text = 1;
}

message nlp_output {
  string result = 1;
}